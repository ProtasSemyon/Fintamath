#include <gtest/gtest.h>

#include "fintamath/numbers/Integer.hpp"

using namespace fintamath;

TEST(IntegerTests, constructorTest) {
  EXPECT_EQ(Integer(), 0);
}

TEST(IntegerTests, stringConstructorTest) {
  EXPECT_EQ(Integer("10").toString(), "10");
  EXPECT_EQ(Integer("2432432423432432454745").toString(), "2432432423432432454745");
  EXPECT_EQ(Integer("-10"), -10);
  EXPECT_EQ(Integer("01"), 1);

  EXPECT_THROW(Integer("--10"), std::invalid_argument);
  EXPECT_THROW(Integer("test"), std::invalid_argument);
  EXPECT_THROW(Integer(""), std::invalid_argument);
  EXPECT_THROW(Integer("+"), std::invalid_argument);
}

TEST(IntegerTests, intConstructorTest) {
  EXPECT_EQ(Integer(10), 10);

  Integer a = 10;
  EXPECT_EQ(a, 10);
}

TEST(IntegerTests, intAssignmentOperatorTest) {
  Integer a;
  EXPECT_EQ(a = 10, 10);
}

TEST(IntegerTests, plusAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) += Integer(10), 15);
  EXPECT_EQ(Integer(-5) += Integer(10), 5);
  EXPECT_EQ(Integer(-10) += Integer(10), 0);
  EXPECT_EQ(Integer("-72838928574893245678976545678765457483992") += Integer("-387827392020390239201210"),
            Integer("-72838928574893246066803937699155696685202"));
}

TEST(IntegerTests, intPlusAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) += 10, 15);
}

TEST(IntegerTests, plusOperatorTest) {
  EXPECT_EQ(Integer(-100) + Integer("10"), -90);
  EXPECT_EQ(Integer("65784932384756574839238475674839") + Integer("-387827392020390239201210"),
            Integer("65784931996929182818848236473629"));
}

TEST(IntegerTests, intPlusOperatorTest) {
  EXPECT_EQ(Integer(5) + 10, 15);
}

TEST(IntegerTests, friendIntPlusOperatorTest) {
  EXPECT_EQ(5 + Integer(10), 15);
}

TEST(IntegerTests, minusAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) -= Integer(10), -5);
  EXPECT_EQ(Integer(-5) -= Integer(-10105), 10100);
  EXPECT_EQ(Integer("520039026478395743890") -= Integer("-1930275483923745483957483983"),
            Integer("1930276003962771962353227873"));
}

TEST(IntegerTests, intMinusAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) -= 10, -5);
}

TEST(IntegerTests, minusOperatorTest) {
  EXPECT_EQ(Integer(-100) - Integer("-748"), 648);
  EXPECT_EQ(Integer("65784932384756574839238475674839") - Integer("-387827392020390239201210"),
            Integer("65784932772583966859628714876049"));
}

TEST(IntegerTests, intMinusOperatorTest) {
  EXPECT_EQ(Integer(5) - 10, -5);
}

TEST(IntegerTests, friendIntMinusOperatorTest) {
  EXPECT_EQ(5 - Integer(10), -5);
}

TEST(IntegerTests, multiplyAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) *= Integer("-12"), -60);
  EXPECT_EQ(Integer(190) *= Integer(100), 19000);

  EXPECT_EQ(Integer(2) *= Integer(2), 4);
  EXPECT_EQ(Integer(2) *= Integer(-2), -4);
  EXPECT_EQ(Integer(-2) *= Integer(2), -4);
  EXPECT_EQ(Integer(-2) *= Integer(-2), 4);

  EXPECT_EQ(Integer("10000000000000000000000000000000000000000000") *=
            Integer("10000000000000000000000000000000000000000000"),
            Integer("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
  EXPECT_EQ(Integer("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000") *=
            Integer("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
            Integer("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    "000000000000000000000000000000000000000000000000000000000000000000000000000"));
  EXPECT_EQ(
      Integer("1000000000000000000000000000000000000000000000000000000000000000000000") *=
      Integer("100000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000"),
      Integer("10000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000"
              "0000000000000000000000000000000000000000000000000000000000000000"));
  EXPECT_EQ(
      Integer("100000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000") *=
      Integer("1000000000000000000000000000000000000000000000000000000000000000000000"),
      Integer("10000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000"
              "0000000000000000000000000000000000000000000000000000000000000000"));
  EXPECT_EQ(Integer("123") *= Integer("29837492356328746293432095803247329462387463287462347628437"),
            Integer("3670011559828435794092147783799421523873657984357868758297751"));
  EXPECT_EQ(
      Integer("123") *=
      Integer("35076306156968495558690448186617350649863928832630116915388712481414348622203874495792275483460150356035"
              "01276296494442204769872208628882685816583149015034150490829747567986311156822048603845157334656209386816"
              "06309504393946821608023000179649439040025214237505334658151077308804228029083539590525897027612757867042"
              "47252371131156418814797920314344275960809082275514891887764761455548832577594052452971505417598416718197"
              "27944845899493678892840111830112509529920517471699237861267263602427655073892668208557712684031475765670"
              "95701074005469808857005026436237359557162582162903447744543426516804140575697566432786005731286883595917"
              "8663661834688407715795207372052181069795781487373087361"),
      Integer("43143856573071249537189251269539341299332632464135043805928116352139648805310765629824498844655984937923"
              "06569844688163911866942816613525703554397273288492005103720589508623162722891119782729543521627137545783"
              "75760690404554590577868290220968810019231013512131561629525825089829200475772753696346853343963692176462"
              "24120416491322395142201441986643459431795171198883317021950656590325064070440684517154951663646052563382"
              "65372160456377225038193337551038386721802236490190062569358734230986015740887981896525986601358715191775"
              "27712321026727864894116182516571952255309976060371240725788414615669092908108006712326787049482866822978"
              "975630405666674149042810506762418271584881122946889745403"));

  Integer bigNum(
      "3507630615696849555869044818661735064986392883263011691538871248141434862220387449579227548346015035603"
      "5012762964944422047698722086288826858165831490150341504908297475679863111568220486038451573346562093868"
      "1606309504393946821608023000179649439040025214237505334658151077308804228029083539590525897027612757867"
      "0424725237113115641881479792031434427596080908227551489188776476145554883257759405245297150541759841671"
      "8197279448458994936788928401118301125095299205174716992378612672636024276550738926682085577126840314757"
      "6567095701074005469808857005026436237359557162582162903447744543426516804140575697566432786005731286883"
      "5959178663661834688407715795207372052181069795781487373087361");
  EXPECT_EQ(
      bigNum *= bigNum,
      Integer(
          "123034725361738598979164283770049355020047829194730577188718850431217810300982817809626374999697401300344567"
          "965004975099674523845827180745690042264848382795392578400958031494791019020721078375851313382307340544849217"
          "355699523919372342689285638936307771428509883450247175430883074528018112106366377740035024455587351458743428"
          "829345450790279704812162125516571396127361899444119205840737974805786683088726378370012263539336952982586230"
          "520772431463209761528900461839369599097080811508633180730360435860932099113897002260498118666082984580250846"
          "321418231548895423124902116577960700356171936511708514149353490197576217413415815424532672100407710015895201"
          "204906251779841980755441870010779349840410739656612996294403929246397191497653045355788968513517965668573144"
          "062261105158768820130671666660816190907738397367398011380955812694554206393194756249523627348492244870151305"
          "002744620369856700284373011535701457868392370978780947012753172594225559926916527436295353173751857054744633"
          "035233918756780916086599851272312050215060894199333990155802741210929882813526429754905691695652607632302924"
          "450306025851469834273868330173794436522216548637093155834932235086867295108597201199535700443685578531192951"
          "096702122394420354260042787250225021154643825874604948530751147789317178574819936624193584242706759360187966"
          "08915343974203803928220416770794160300461016974165792937944321"));
  EXPECT_EQ(
      bigNum *= bigNum,
      Integer(
          "151375436448384432254283307583486066667042190660677620373123854553192330171309426231376077199633148394587309"
          "320500780366596644977921667705846188987094209368940524153866159642542317461838630631239213601469094819727267"
          "931442110409869192021916471495566770793968771356423244153613116589891384095154889897447129616495361921128483"
          "415008013000809960124014824730978336773349172340512505436233122012217784681438531620807943478571185612552450"
          "478078388300936606517852653888025048589518914846487741067060341531436357187268537672362009339521911619031150"
          "310962055950155717666529133873841751541637455255626595846380131842901830415858642992816729709654251950863750"
          "665357762009085810629217917751342352313325984460629046549764303679784381441423865043453230665790947214415711"
          "707134874389436507764444241582593434407423309392527966674580478029178887423061253968562091672677599167671594"
          "875604798350156550372883311207885282088863879202461885968408041715086679139981263812558960095695476485505356"
          "891618587969820162186732250377710432275819830606562398013148854467177307257792538812521105073250276853587043"
          "874285676126878294501204134744955080973659170543493289121184558611797400317932087143639362969152630394559727"
          "560144885191109167802199267405992294077943816747815152047986153974462696242579776353456270439825236419290517"
          "542215340162294579962815285992414141725975115146703976251490225724031898802682695139379699275083967566953749"
          "280275248401215696451748644475142038613799290222798072247498886364828935253690749237820783821104282786528804"
          "685820847939317976725694662661166127380194678954930597817803996943971279795062385881705273889663480715671471"
          "466170947086809281202777180196503031441640466417520512377184927727082258708265839007600152745143501419320905"
          "768663557824966355252526518492368909694102745402184718285534458364891811419700240301070527639998721161225798"
          "676121766517224180501332030635179372072827350327920970532916699374836128894515290852189101489989500779928531"
          "013587309296296610484631205391906273047197136471856730859350878848416701953443562929378684861312928240015961"
          "371220036087605180304967215500558598031593601273862799041607646012945892188848304803064939675273843852174253"
          "591780671275868647310004309203524619697995493946647868123514739427870390608088912784755244273289213735492487"
          "806711200286298562110855389881142350728943050786535546037005625779944656488759175679073720657521788460803169"
          "399098915443582503593087698432551216543011752197660404175871840418634933566440380132475375830576077689889610"
          "555877165396071750587143416063996020201199751972410003093042374458757966810782966064384827015516919398703986"
          "180788431985196032764700920816810628506882704347513628278314226925268661535156504738466810090463408594081517"
          "474013296151041"));
  EXPECT_EQ(
      bigNum *= bigNum,
      Integer(
          "229145227599388740572577961939405964237625425637398798191873937162289276749671023202591409719700396811919535"
          "218451070038197225776758526481305828965238484893004016186051441221787149637753151218130162338454226666223919"
          "670709412227999912951488316049720149215486699881369105505834291964395648361923242085363900753467252703078811"
          "011361260669559308130059770042950486333676614932129479062740004631201973906319760694678887603024806742784631"
          "148911485642445602918044255584196372884914005631812164594053319100108199181371141695626426863659139094453664"
          "082216005363268508703198726417961884604779127541304758450192212443508023971258046167539416776898921862548522"
          "388198797110774665942702332759701842070892419593076064528881219460699734731871784296218509230358036985846050"
          "047600571939079914283495161736544831880347354433706084249524372875743736259616838581805454594557311130367408"
          "035403462954781911374017426265996851086893051226880336250915001921494334716067581871113366236958363241497981"
          "099575304889294462378766117015789036326569887046019911707003186990909944435697370068860004560732868568325417"
          "551470320070238485441438683442866881749204902270196703573317441862406394348201245328923524958376282044448657"
          "686283150037276670590646013504763060193441858356101369998050721629723965334440185432349457057858018211945447"
          "958939100839140653803745819060403677979232698280974443590832144269246958267592224224011870305258484392853255"
          "909045323576226847591680838837239525283537706512929123532392887106182089326797141477597984962339361621521719"
          "059764112579914460042445312431266515141697755664084124165114448111091038993442939643795159011275153204762821"
          "769142096303502563343881052774922456019710837482594393268826331223900952629591807435404077336755272952794999"
          "916317175280760287206774036817698744129937564160286955098465678797368294256093381223667823439426502493323101"
          "005479177567642087344318463618751500225471957308768606798113700742625725574272403584463006072385836977609350"
          "317837393098629487339457302956725335577277715374948822395683295635767705706063296848804972609391874254708738"
          "671434882733890963942439984956196336868673467437692281601900837124001238489536500784240711694807375808611367"
          "154797141277462303843828659507654974801093526614805550067312639457431830343012384102369796262913110328148997"
          "393820047923405287149153307122663766500021226635692324555381196470249178927346013621573769093537263192817907"
          "381779489291453332507777839781765412973947279067302993831466164481807338890682685992618100177818389191801386"
          "620940813851922581742615458719528758013081905383173562273391884863537463309239735302017400728040146578474449"
          "880892841441704531896546035789542046269246430998161448861474590889490927840338929787875750626235030618896527"
          "079993922923474739529575327952354010478008644054358533998803887159114685035251718192811182837260594207066665"
          "528653282665334706360565194205734791399239150431331118649403161526824132419176661151714017911400326280910191"
          "093355536291070706207494152939363393486297473156569639878758722504999274622523675123429700154550711011124169"
          "239884586949716744013549459104768373080827589703415314361267686140922843523967935702173625323584919217451665"
          "152351528984974069584861629023542271087868313723517653433479049841587708951419525885926522999819287100735522"
          "164361893020693134102258213224335647031825743880107628106847229158097825510971891319420381895636114368520045"
          "877488079507586552802773911968502854914554161857981155052371756775069016026689046188261659119514956330180906"
          "065117745576893339412167685443159147366433727448283672040019125101974274094488315527510420004220390041498026"
          "114303408714957908589978524798261939643902482512804777640076980469823943414680127287936978281229993887060642"
          "604266927742103282263393413794384112063989317970515855215268073171015240090573710161321125451997649435499433"
          "264446462356695069560429086645994584975474567498767948595378862817685960293037237203327054556656348580996420"
          "144232051437395243867585492205212348308392089657223640986576998181923946999433642223439412234790601184523990"
          "615207222979625106249780489817153393098752747896654466353665894945971388649013931773199191523603931109444587"
          "118155295669704403790456601066579419059852156230213705120881330195896378616835935251024969373407845750148927"
          "867559771831927649119043515288999312781437968138331720833557056866816595222508625533254486828540990482304879"
          "152521665216399725647714332682627961403309857712265864029234046062579214031313629923583935185637735239254877"
          "349495361270437418291529813258760122324408054500765162254515403721224078921374823173632056776710741870155246"
          "092638735846163176720158015494375432676474520115441214909208401996420822306955568130955180354640954329974107"
          "724535975873860721151541481075672034578913467375907945972927044359984781674995572594584571631197748322004817"
          "307167821582508237893046486875117877148977849580914359121463214824065796588450797192728368927504186674273545"
          "808142330720157774255861672637548437856170947071439271794618929722943570129923651044470707058742086713482112"
          "454124521165781499298262224751813076075019617309383281157661772644578137808946070798029085277804724380614009"
          "519469748727191859350724279589369027480970459699060624466072023590568937002058262432880623917609063222334648"
          "015172444066434730419603331132510246052724726203919409685193344436030575793472159309390983260140604187020275"
          "994153726066798525393806056148356738952848704107088961945776280049732691756676069600649702077714887169192685"
          "51306001746368500505085383681"));
  EXPECT_EQ(
      bigNum *= bigNum,
      Integer(
          "525075353315756673987618364527862464858716372017412885232571478560168577552209070511173433565235955940364560"
          "952860656397837830394604637877201606477680271846821784909835242978112259166132208524924371648278765953812076"
          "911502580473519197862690332109930354425292582838847304211721368377024071571024407564655862023623582785542891"
          "295169805475740236707532369847647160352595561399174226161372051119367964038413514796750032120455727324186149"
          "712584011077192245186945541229988604036892860284188482193277127170215420012582011112036715313180465998072023"
          "464100003713416938236616004168899320316839467590116601389187047878469071367161056823939650210465397815615597"
          "446976774529260839387016814553478936129356930887953193690505163691453503861735210235948342724886085807456292"
          "589191359800580376022351805601942695143564683078028295583869318805512467023663787323317724850556307061760008"
          "730844382571845690381429431428069844374228399683130459382924309222707554640404717393785442614523565363121404"
          "370242009703671940044418512035745065429309883708579915497932725860094821724795303758838910625487782173119919"
          "216349329132068166657584939969081037646017819721196787342928377382488352866314556440200216960855423459540535"
          "978088959749396077685648336789277868136546135389801645652736482147965516245998418297439365831698615078556680"
          "015084742463574896059538336809285860015649813246655901546424402916873513079542350464414355328507053386377289"
          "360562135812157949213621273789622610851546572940940266442838367314772058531652940537902779247352033821267988"
          "111366161726953439264776175337211674025972709622461859859669381264026406916182825306650874382453789863499797"
          "648559340902745209243319387265607551166691648364483889028843962175563092239789826528062149461078094499127106"
          "117771100473287337155018275978015580024920678769041767385184723781015538143092147637625197771971723604938366"
          "108165768288391374919944812915666066799654179578072062195349281603083993828127738839238238659251366674702054"
          "074262900682547657200000859878461992913998240124974252120816160534031574133749686183834162937299307302725926"
          "433190615071123808547577208494330171188656297049145976208286879876129406757662106973024660216895455977147734"
          "405953610178246891263282261594031233674085339574304981172317700845321606952993609424793587876309390345099382"
          "379035188708348138679973336159244663563744793331049992530061088629871008386844749932669008013727216327350161"
          "061389033606939706275004632122401251122740736099510637739594430929719490265918643152921412072495781217406540"
          "469185138825548184989058911183569847303792839920513469663788124531433355682992291463444807316721390064812904"
          "712941785290633523647084996791706557448701382325960475660048561675767919364598651758367276616933631674225370"
          "132050716810773636418447517799431986508269948832893618550253900094016562859802441412434562565766030741277482"
          "133930968353549550315582616706002737317541556722471866931277674872751050406685192150104668791849178350013296"
          "372518506450153161649770857168801536454075240511220431245474533706817622903745335817600547636690696256452875"
          "281358536643727688483097449339123033027260140628052526172530234626680697704913073492025678344122142772514923"
          "761791200093419079356280283648119280857202306189979538818598329663265822394044482653084672658606183662599235"
          "626397648062587254925013618451314703520753086840309352274432406492485686029137036085326501117284165451719931"
          "597019319684593970034477606801750176622212236473166420105977544570073434738997380085658275644171346821845532"
          "738847215699501809642064493592669480898207041305631717657969732074872468803536005458671257609610852633409668"
          "856553509125697513192231447443131746616953384410706678631268949624865474289113819418373999407633292855662737"
          "878765993029417087207959889515315452933504030428664798256259414653908774703682809006926497009584012082724453"
          "910245356601156916366083495783068922940641472466048641578463464892844501460667299570052794177880506351138130"
          "523817247338403035678745336098371836315418775428020124793558500934001772214752333961310267621362252617684894"
          "960119016690569699123655471513974952925508694750492080810823344275851513387794990204687695673011847169848995"
          "219282391362362339131013291775654057383785423640585148195121914498275218438302525126573227100575001740983727"
          "707669096625707914588059911504831480638139061560295121679804521657768055614015091437485681689086419261599223"
          "472443886584652448808235095285534066651138993954965313295519655208338300767897261119303484943657111771172192"
          "833933307752290935398300876853849454482620894161226863560809415132749665404913265676690102022997597966256646"
          "351582215099452782525505135029945775939193620154493271081788802951835908247250628078673663308143962473139129"
          "591507074619771199406429104620297725152587440996233578277369149321213655413829719984245773745267853037287695"
          "097583967966905763984375463306983952548195606590815490671153229773602186393940874255149044744976942492699395"
          "393325071974619197602821558044196278697884718114465622126251745855059203612647573705891131313316421774138495"
          "800552379635170509097566160259791415259830835226608489176959856445436969045023501348219310838768240408165382"
          "826275009942861253719719531832747070084673476271624183685963639612061391886072913996863237764630580879370239"
          "551187240132494944685531582811784143827837105534017958825465791108732628186088484006690731597117089266033508"
          "597841418714345819569016442937499563423997698578393270432352885335924095484562284154359045466224797484593823"
          "207543788244541185662201875304057485292030507417454010592001520129739124185997180661397699345717097539662749"
          "330639502216007335018498564555378227937603279949983925641000940152397036713073444333366931349050064744300330"
          "033058918403228693399623811113254566920933807536518355228543913382981841497691561916952265920231330756270658"
          "147873743172886300568831197683112643325886246567922048333391808812200219558307281308888496836417464630527152"
          "193185179154836730104679322521490923834208200642101851260187883405377916781905355733533082703245059144726524"
          "120545922163654204970506770854094822827087288192990555593749164296444198196112515796115036170886553001191091"
          "014711477592966832412412395131786254019901961511973943480164362208147683400378344665066549209892098054542481"
          "454731127264027359336344574718430440262580260412005882564900597051874843228978824506422646767162694551369756"
          "470030387773591193311635253168823679898907885852046674494676851673345178876824583520181875809284046172493900"
          "582861874455577160944122690597719972546261194473607000285296133281163483054968200617383169665728265448969708"
          "194181807219307771722715379969913714215109895806854117505396588426465845511706883667938673904517415181299036"
          "854841913818170413576571482702051034475497124137650803665704304818071824059979473144898706484278261322319954"
          "181748083155910248365779976924454460562447046465257509770510397673977739157371881574104652306714007208095619"
          "978502621690781249771964340449663183430484570494456781672407437199438567416737768819329579632497745690074591"
          "949654084298416319789264471419531839499576655712436221533893769277247292025837494520816793046055730955263931"
          "617024711147033181287029822052440119691229346224448633529892161743767554557111529031937873427853540712225973"
          "420368466692812400378892098219817693929605399543992607241922351591775221893754698738365973580538040105891490"
          "353934003827740354602307899409923517743764081462495439306859332473483662123846334053725067114506414490855645"
          "232670464725616633016909127428704523494874088285841696376035865234837005623814190056761810644063797460425676"
          "898204366569273562337457382750078343095731459612952417145995042869758205308314159344928884188506745133124880"
          "941046263278283565853783610230805500193523082332247572532394281976697288988764646763673337672281862087937684"
          "322466856005950361098646512865199381542942670006951849511892508341594164830143201451859620892460990612613377"
          "187456280324124110545347047853923268370125737507075498790507164704797846753656435887128026945764750182084756"
          "718845692706340151314175123289294628378396365876381378173109675695264889221708824920571769882141470739824827"
          "749221268338203742767505294406618135611657174547075581233072466023066124038338435412635230983394554384953778"
          "300407259687648443515470204723825916171594517902342586149143655042361903300375456931499997522159779991577547"
          "292813073697009088735089061023530906373974105270684428174109860820199028456312448574213702168482555659668995"
          "130163990647511426431888970109123765942300839055779598067338542073051246311570678598527616314449766851282142"
          "845070073361103187662858802053013654734458206767897552976640822559598818245455394779247516263574648226664346"
          "236551508702679083410016278869995994060435331540325672022513021479422312979712385317000169053048071561851447"
          "695143844851283249830456895626179072165200509905225261746909288726299887356441471923143953484462493176001670"
          "411860274102892740447720037821993967439540002177852007379653726200397180606830200464336727913726057000435818"
          "060038141627719459438535148533180556382971831138530184113148751201274456906148407002112965308464200869659663"
          "800924510271118270253547817692214329226444698373644992831169365954282311459343787760019842742268228114575225"
          "014765326691171155942106032930738538485214275197826606171007274432422147327734928642478655312652124817665119"
          "261080347747454026341242124337631046995193881546946579378917993093301616893051090016635865578611748575115441"
          "432557247810134804756157628006413600655027201493261157165070135491076039905304502614717823693292626326609571"
          "626638080809687246864700316951722810325833194726229292587054056791885294417734789272804200827758259781528645"
          "238700414063833093095281483089913730990690638307371919875661563050717963498646198893571318794098759955001140"
          "362148262519261037837015035243359364476296102715468614047737336450771691747186870301981790380912839918048286"
          "023064226484733749405982026685682893902900705711207899504387905988214693522369292360746014624164732048241406"
          "798782632934661157099415619954855413917237889477351899485852638485624349706454648835190464996690342216094734"
          "288703900942777884244520854062658764228247343256443286202882064035552413867580110446571711031696206295404899"
          "192522768540407161137320732919347841392014962878706097079470555912173163437138767759383691371529737677448521"
          "710703438560293409811559466136416706663738455954156557979888543673781192761780623419404598391260144581043707"
          "596545482362298237262689094674452239002072487348812153201280571935376691292142097136332249842271008619134945"
          "668397449003661477459397828280249836195177557873354496650101252149620963022402320837724722221521355457738829"
          "403774528586763001984673142693533057996208909790775600257616624887416254259829992772490203085569404796254996"
          "239858440041433274200690837181845702296096899881452319022399743878664475279581420130632815890324906120799587"
          "196239625285537049703745880213074847992463253073407426073938512212379965366695424855366627524513096871821462"
          "780954251198329876879475643655179996936141808182981109761"));
}

TEST(IntegerTests, intMultiplyAssignmentOperatorTest) {
  EXPECT_EQ(Integer(5) *= 10, 50);
}

TEST(IntegerTests, multiplyOperatorTest) {
  EXPECT_EQ(Integer(100) * Integer(-748), -74800);
  EXPECT_EQ(Integer(63275) * Integer(4), 253100);
  EXPECT_EQ(Integer("-46387457368576823782") * Integer("-4837274673279875647746473847384738478378327647387463746372"),
            Integer("224388872686866615413795053083509315281416419176500823292877913926466185818904"));
}

TEST(IntegerTests, intMultiplyOperatorTest) {
  EXPECT_EQ(Integer(5) * 10, 50);
}

TEST(IntegerTests, friendIntMultiplyOperatorTest) {
  EXPECT_EQ(5 * Integer(10), 50);
}

TEST(IntegerTests, divideAssignmentOperatorTest) {
  EXPECT_EQ(Integer(-25) /= Integer(368273929), 0);
  EXPECT_EQ(Integer(2000) /= Integer(-368273929), 0);
  EXPECT_EQ(Integer(-20) /= Integer(-20), 1);
  EXPECT_EQ(Integer(-29829920) /= Integer(1), -29829920);
  EXPECT_EQ(Integer(150067278) /= Integer(100000), 1500);

  EXPECT_EQ(Integer(2) /= Integer(2), 1);
  EXPECT_EQ(Integer(2) /= Integer(-2), -1);
  EXPECT_EQ(Integer(-2) /= Integer(2), -1);
  EXPECT_EQ(Integer(-2) /= Integer(-2), 1);

  EXPECT_EQ(Integer(0) /= Integer("368273929654738476473823743829388329882"), 0);
  EXPECT_EQ(Integer("10000000000000000000000000000000000000000000") /=
            Integer("10000000000000000000000000000000000000000"),
            Integer("1000"));
  EXPECT_EQ(Integer("-4837274673279875647746473847384738478378327647387463746372") /= Integer("-463874573"),
            Integer("10427979792028556925767245809751978965181020274175"));
  EXPECT_EQ(Integer("100000000000000000000000000000000000000000000000000000000000000000000000000000000") /=
            Integer("7182818284590452353602874713526624977572470936999595749669676277240766335354759"),
            13);

  EXPECT_EQ(Integer("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000") /=
            Integer("10000000000000000000000000000000000000000000"),
            Integer("10000000000000000000000000000000000000000000"));
  EXPECT_EQ(Integer("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    "000000000000000000000000000000000000000000000000000000000000000000000000000") /=
            Integer("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
            Integer("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
  EXPECT_EQ(
      Integer("10000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000"
              "0000000000000000000000000000000000000000000000000000000000000000000000") /=
      Integer("100000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000"),
      Integer("1000000000000000000000000000000000000000000000000000000000000000000000"));
  EXPECT_EQ(
      Integer("10000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000"
              "0000000000000000000000000000000000000000000000000000000000000000") /=
      Integer("1000000000000000000000000000000000000000000000000000000000000000000000"),
      Integer("100000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000"));

  Integer bigA("12303472536173859897916428377004935502004782919473057718871885043121781030098281780962637499969740130"
               "03445679650"
               "04975099674523845827180745690042264848382795392578400958031494791019020721078375851313382307340544849"
               "21735569952"
               "39193723426892856389363077714285098834502471754308830745280181121063663777400350244555873514587434288"
               "29345450790"
               "27970481216212551657139612736189944411920584073797480578668308872637837001226353933695298258623052077"
               "24314632097"
               "61528900461839369599097080811508633180730360435860932099113897002260498118666082984580250846321418231"
               "54889542312"
               "49021165779607003561719365117085141493534901975762174134158154245326721004077100158952012049062517798"
               "41980755441"
               "87001077934984041073965661299629440392924639719149765304535578896851351796566857314406226110515876882"
               "01306716666"
               "60816190907738397367398011380955812694554206393194756249523627348492244870151305002744620369856700284"
               "37301153570"
               "14578683923709787809470127531725942255599269165274362953531737518570547446330352339187567809160865998"
               "51272312050"
               "21506089419933399015580274121092988281352642975490569169565260763230292445030602585146983427386833017"
               "37944365222"
               "16548637093155834932235086867295108597201199535700443685578531192951096702122394420354260042787250225"
               "02115464382"
               "58746049485307511477893171785748199366241935842427067593601879660891534397420380392822041677079416030"
               "04610169741"
               "65792937944321");
  EXPECT_EQ(bigA /=
            Integer("35076306156968495558690448186617350649863928832630116915388712481414348622203874495792275483460150"
                    "35603501276296494442204769872208628882685816583149015034150490829747567986311156822048603845157334"
                    "65620938681606309504393946821608023000179649439040025214237505334658151077308804228029083539590525"
                    "89702761275786704247252371131156418814797920314344275960809082275514891887764761455548832577594052"
                    "45297150541759841671819727944845899493678892840111830112509529920517471699237861267263602427655073"
                    "89266820855771268403147576567095701074005469808857005026436237359557162582162903447744543426516804"
                    "1405756975664327860057312868835959178663661834688407715795207372052181069795781487373087361"),
            Integer("35076306156968495558690448186617350649863928832630116915388712481414348622203874495792275483460150"
                    "35603501276296494442204769872208628882685816583149015034150490829747567986311156822048603845157334"
                    "65620938681606309504393946821608023000179649439040025214237505334658151077308804228029083539590525"
                    "89702761275786704247252371131156418814797920314344275960809082275514891887764761455548832577594052"
                    "45297150541759841671819727944845899493678892840111830112509529920517471699237861267263602427655073"
                    "89266820855771268403147576567095701074005469808857005026436237359557162582162903447744543426516804"
                    "1405756975664327860057312868835959178663661834688407715795207372052181069795781487373087361"));

  EXPECT_THROW(Integer(-25) /= Integer(0), std::domain_error);
}

TEST(IntegerTests, intDivideAssignmentOperatorTest) {
  EXPECT_EQ(Integer(10) /= 5, 2);
}

TEST(IntegerTests, divideOperatorTest) {
  EXPECT_EQ(Integer(-25) / Integer(368273929), 0);
  EXPECT_EQ(Integer("-4837274673279875647746473847384738478378327647387463746372") / Integer("-463874573"),
            Integer("10427979792028556925767245809751978965181020274175"));
}

TEST(IntegerTests, intDivideOperatorTest) {
  EXPECT_EQ(Integer(10) / 5, 2);
}

TEST(IntegerTests, friendIntDivideOperatorTest) {
  EXPECT_EQ(10 / Integer(5), 2);
}

TEST(IntegerTests, moduloAssignmentOperatorTest) {
  EXPECT_EQ(Integer(25) %= Integer(368273929), 25);
  EXPECT_EQ(Integer(-25) %= Integer(3), -1);
  EXPECT_EQ(Integer(2000) %= Integer(-36), Integer(20));

  EXPECT_EQ(Integer(0) %= Integer("368273929654738476473823743829388329882"), 0);
  EXPECT_EQ(Integer("54732897657873247528747287294738765738746547387476327946763287467387267328724673874") %=
            Integer("47632837528673287446238746237943"),
            Integer("25193809905191080888100466723580"));
  EXPECT_EQ(Integer("54732897657873247528747287294738765738746547387476327946763287467388493894839489384938483948398493"
                    "83893847267328724673874") %= Integer("1738383928837528673287446238746237943"),
            Integer("1186817955126284001426922341829394317"));

  EXPECT_THROW(Integer(-25) %= Integer(0), std::domain_error);
}

TEST(IntegerTests, intModuloAssignmentOperatorTest) {
  EXPECT_EQ(Integer(10) %= 4, 2);
}

TEST(IntegerTests, moduloOperatorTest) {
  EXPECT_EQ(Integer(-25) % Integer(3), -1);
  EXPECT_EQ(Integer("54732897657873247528747287294738765738746547387476327946763287467387267328724673874") %
                Integer("47632837528673287446238746237943"),
            Integer("25193809905191080888100466723580"));
}

TEST(IntegerTests, intModuloOperatorTest) {
  EXPECT_EQ(Integer(10) % 4, 2);
}

TEST(IntegerTests, friendIntModuloOperatorTest) {
  EXPECT_EQ(10 % Integer(4), 2);
}

TEST(IntegerTests, preIncrementOperatorTest) {
  Integer a = 5;
  EXPECT_EQ(++a, 6);

  Integer b("4632819374289745632874563287263891364238928");
  EXPECT_EQ(++b, Integer("4632819374289745632874563287263891364238929"));
}

TEST(IntegerTests, postIncrementOperatorTest) {
  Integer a = 5;
  EXPECT_EQ(a++, 5);
  EXPECT_EQ(a, 6);

  Integer b("4632819374289745632874563287263891364238928");
  EXPECT_EQ(b++, Integer("4632819374289745632874563287263891364238928"));
  EXPECT_EQ(b, Integer("4632819374289745632874563287263891364238929"));
}

TEST(IntegerTests, preDecrementOperatorTest) {
  EXPECT_EQ(--Integer(5), 4);
  EXPECT_EQ(--Integer("4632819374289745632874563287263891364238928"),
            Integer("4632819374289745632874563287263891364238927"));
}

TEST(IntegerTests, postDecrementOperatorTest) {
  Integer a = 5;
  EXPECT_EQ(a--, 5);
  EXPECT_EQ(a, 4);

  Integer b("4632819374289745632874563287263891364238928");
  EXPECT_EQ(b--, Integer("4632819374289745632874563287263891364238928"));
  EXPECT_EQ(b, Integer("4632819374289745632874563287263891364238927"));
}

TEST(IntegerTests, unaryPlusOperatorTest) {
  EXPECT_EQ(+Integer(5), 5);
  EXPECT_EQ(+Integer("-6748346738212618723653728362813238128121823281328381262673676266"),
            Integer("-6748346738212618723653728362813238128121823281328381262673676266"));
}

TEST(IntegerTests, unaryMinusOperatorTest) {
  EXPECT_EQ(-Integer(5), -5);
  EXPECT_EQ(-Integer("-6748346738212618723653728362813238128121823281328381262673676266"),
            Integer("6748346738212618723653728362813238128121823281328381262673676266"));
}

TEST(IntegerTests, equalOperatorTest) {
  EXPECT_TRUE(Integer(13663) == Integer(13663));

  EXPECT_FALSE(Integer("5643879274839203876783492873448927") == Integer("-5643879274839203876783492873448927"));
  EXPECT_FALSE(Integer(13663) == Integer(298392));
}

TEST(IntegerTests, intEqualOperatorTest) {
  EXPECT_TRUE(Integer(283746) == 283746);
}

TEST(IntegerTests, friendIntEqualOperatorTest) {
  EXPECT_TRUE(283746 == Integer(283746));
}

TEST(IntegerTests, notEqualOperatorTest) {
  EXPECT_TRUE(Integer(13663) != 298392);
  EXPECT_TRUE(Integer("5643879274839203876783492873448927") != Integer("-5643879274839203876783492873448927"));

  EXPECT_FALSE(Integer(13663) != 13663);
}

TEST(IntegerTests, intNotEqualOperatorTest) {
  EXPECT_TRUE(Integer(283746) != 12121);
}

TEST(IntegerTests, friendIntNotEqualOperatorTest) {
  EXPECT_TRUE(283746 != Integer(12121));
}

TEST(IntegerTests, lessOperatorTest) {
  EXPECT_TRUE(Integer("-724627382732") < Integer("643864837483437378342"));
  EXPECT_TRUE(Integer("7236") < Integer("748274299"));
  EXPECT_TRUE(Integer("1") < Integer("10000000000000000000000000000000000"));

  EXPECT_FALSE(Integer("-7236726372") < Integer("-64283827387283728"));
  EXPECT_FALSE(Integer("7236726372") < Integer("-62736"));
}

TEST(IntegerTests, intLessOperatorTest) {
  EXPECT_TRUE(Integer(283746) < 2379264);
}

TEST(IntegerTests, friendIntLessOperatorTest) {
  EXPECT_TRUE(283746 < Integer(2379264));
}

TEST(IntegerTests, moreOperatorTest) {
  EXPECT_TRUE(Integer("-7236726372") > Integer("-64283827387283728"));
  EXPECT_TRUE(Integer("7236726372") > Integer("-727"));
  EXPECT_TRUE(Integer("7236") > Integer("483"));

  EXPECT_FALSE(Integer("-724627382732") > Integer("643864837483437378342"));
  EXPECT_FALSE(Integer("1") > Integer("10000000000000000000000000000000000"));
}

TEST(IntegerTests, intMoreOperatorTest) {
  EXPECT_TRUE(Integer(283746) > 12121);
}

TEST(IntegerTests, friendIntMoreOperatorTest) {
  EXPECT_TRUE(283746 > Integer(12121));
}

TEST(IntegerTests, lessEqualOperatorTest) {
  EXPECT_TRUE(Integer("-724627382732") <= Integer("643864837483437378342"));
  EXPECT_TRUE(Integer("-7246") <= Integer("-7246"));
  EXPECT_TRUE(Integer("1") <= Integer("10000000000000000000000000000000000"));

  EXPECT_FALSE(Integer("-7236726372") <= Integer("-64283827387283728"));
  EXPECT_FALSE(Integer("7236726372") <= Integer("0"));
  EXPECT_FALSE(Integer("7236") <= Integer("-74827"));
}

TEST(IntegerTests, intLessEqualOperatorTest) {
  EXPECT_TRUE(Integer(12121) <= 283746);
}

TEST(IntegerTests, friendIntLessEqualOperatorTest) {
  EXPECT_TRUE(12121 <= Integer(283746));
}

TEST(IntegerTests, moreEqualOperatorTest) {
  EXPECT_TRUE(Integer("-7246") >= Integer("-7246"));
  EXPECT_TRUE(Integer("-7236726372") >= Integer("-64283827387283728"));
  EXPECT_TRUE(Integer("7236726372") >= Integer("0"));
  EXPECT_TRUE(Integer("7236") >= Integer("-748274299"));

  EXPECT_FALSE(Integer("-724627382732") >= Integer("643864837483437378342"));
  EXPECT_FALSE(Integer("1") >= Integer("10000000000000000000000000000000000"));
}

TEST(IntegerTests, intMoreEqualOperatorTest) {
  EXPECT_TRUE(Integer(283746) >= 12121);
}

TEST(IntegerTests, friendIntMoreEqualOperatorTest) {
  EXPECT_TRUE(283746 >= Integer(12121));
}

TEST(IntegerTests, sqrtTest) {
  EXPECT_EQ(Integer(35).sqrt(), 5);
  EXPECT_EQ(Integer(100).sqrt(), 10);
  EXPECT_EQ(Integer(4212).sqrt(), Integer(64));

  EXPECT_EQ(Integer("992188888888").sqrt(), Integer(996086));
  EXPECT_EQ(Integer("10000000000000000000000000000000000000000000000000000").sqrt(),
            Integer("100000000000000000000000000"));
  EXPECT_EQ(Integer("68732648273642987365932706179432649827364").sqrt(), Integer("262169121510606178721"));

  EXPECT_THROW(Integer(-9289).sqrt(), std::domain_error);
}

TEST(IntegerTests, toStringTest) {
  EXPECT_EQ(Integer("618288").toString(), "618288");
  EXPECT_EQ(Integer("0").toString(), "0");
  EXPECT_EQ(Integer("-738").toString(), "-738");
}

TEST(IntegerTests, cloneTests){
  auto a = Integer(100);
  EXPECT_TRUE(&a != &(*a.clone()) && a.equals((*a.clone()).to<Integer>()));
}

TEST(IntegerTests, equalsTests){
  EXPECT_TRUE(Integer(100).equals(Integer("100")));
  EXPECT_FALSE(Integer(100).equals(Integer("-100")));
  EXPECT_FALSE(Integer(100).equals(Integer("1")));
}